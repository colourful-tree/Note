1.tensorflow 源码下载：
  nohup git clone https://github.com/tensorflow/tensorflow &
2.bazel 安装
  见bazel
3.额外库
  基本已经安好，如果少的话，少什么安什么
4.编译
  (a)    nohup bazel build -c opt --local_resources 1024,.5,1.0 //tensorflow/tools/pip_package:build_pip_package &
  其中--local_resources 1024,.5,1.0 小机器上内存控制
  (b)    bazel build --linkopt='-lrt' -c opt --copt=-msse4.2 --copt=-msse4.1 --copt=-msse3-k --local_resources 1024,.5,1.0 //tensorflow/tools/pip_package:build_pip_package
  [dropping the --config=cuda (if CUDA support is not needed) and the -k (since no error occurred during the compilation) works as well]
  [http://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions]
5.创建你的pip并安装！
  bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
  pip install /tmp/tensorflow_pkg/tensorflow-xxxxxxxx-cp27-none-linux_x86_64.whl
  
 ps: all for:
  [W  The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.
  [W  The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
  [W  The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.]
 
 
Optimizing CPU performance

To be compatible with as wide a range of machines as possible, TensorFlow defaults to only using SSE4.1 SIMD instructions on x86 machines. Most modern PCs and Macs support more advanced instructions, so if you're building a binary that you'll only be running on your own machine, you can enable these by using --copt=-march=native in your bazel build command. For example:

$ bazel build --copt=-march=native -c opt //tensorflow/tools/pip_package:build_pip_package
If you are distributing a binary but know the capabilities of the machines you'll be running on, you can manually choose the right instructions with something like --copt=-march=avx. You may also want to enable multiple features using several arguments, for example --copt=-mavx2 --copt=-mfma.

If you run a binary built using SIMD instructions on a machine that doesn't support them, you'll see an illegal instruction error when that code is executed.
